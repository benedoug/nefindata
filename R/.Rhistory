install.packages("tidyverse")
rbeta.binom <- function(size, s, n, a, b) {
rbeta(size, a + s, b + n - s)
}
a = 1
b = 1
n = 1000
s = 30
plot(rbeta.binom(100, s, n, a, b))
hist(rbeta.binom(100, s, n, a, b))
sample <- 1e4
hist(rbeta.binom(sample, s, n, a, b))
hist(rbeta(sample, a, b))
hist(rbeta.binom(sample, s, n, a, b))
hist(rbeta(sample, 0.9, b))
hist(rbeta(sample, 1.5, b))
hist(rbeta(sample, 1.5, 1.5))
line(rbeta(sample, 1.5, 1.5))
density(rbeta(sample, 1.5, 1.5))
plot(density(rbeta(sample, 1.5, 1.5)))
hist(rbeta.binom(sample, s, n, a, b))
plot(density(rbeta(sample, 1.5, 1.5)))
library(ggplot2)
s <- 300
sample <- 1e4
hist(rbeta.binom(sample, s, n, a, b))
curve(density(rbeta(sample, 1.5, 1.5)))
rbeta.binom <- function(size, s, n, a, b) {
rbeta(size, a + s, b + n - s)
}
dbeta.binom <- function(size, s, n, a, b) {
dbeta(size, a + s, b + n - s)
}
ggplot() +
stat_density(dbeta, args=list(a = a, b = b)) +
stat_density(dbeta, args=list(a = a + s, b = b + n - s))
a <- 1
b <- 1
n <- 1000
s <- 300
xx <- data.fame(x = c(0, 1))
ggplot(xx, aes(x = x)) +
stat_density(dbeta, args=list(a = a, b = b)) +
stat_density(dbeta, args=list(a = a + s, b = b + n - s))
a <- 1
b <- 1
n <- 1000
s <- 300
xx <- data.frame(x = c(0, 1))
ggplot(xx, aes(x = x)) +
stat_density(dbeta, args=list(a = a, b = b)) +
stat_density(dbeta, args=list(a = a + s, b = b + n - s))
View(xx)
ggplot(xx, aes(x = x)) +
stat_function(dbeta, args=list(a = a, b = b)) +
stat_function(dbeta, args=list(a = a + s, b = b + n - s))
ggplot(xx, aes(x = x)) +
stat_function(fun = dbeta, args=list(a = a, b = b)) +
stat_function(fun = dbeta, args=list(a = a + s, b = b + n - s))
ggplot(xx, aes(x = x)) +
stat_function(fun = dbeta, args=list(shape1 = a, shape2 = b)) +
stat_function(fun = dbeta, args=list(shape1 = a + s, shape2 = b + n - s))
theme_bw()
ggplot(xx, aes(x = x)) +
stat_function(fun = dbeta, args=list(shape1 = a, shape2 = b)) +
stat_function(fun = dbeta, args=list(shape1 = a + s, shape2 = b + n - s))
ggplot(xx, aes(x = x)) +
stat_function(fun = dbeta, args=list(shape1 = a, shape2 = b)) +
stat_function(fun = dbeta, args=list(shape1 = a + s, shape2 = b + n - s)) +
theme_bw()
s <- 30
n <- 100
s <- 30
xx <- data.frame(x = c(0, 1))
ggplot(xx, aes(x = x)) +
stat_function(fun = dbeta, args=list(shape1 = a, shape2 = b), ) +
stat_function(fun = dbeta, args=list(shape1 = a + s, shape2 = b + n - s)) +
theme_bw()
ggplot(xx, aes(x = x)) +
stat_function(fun = dbeta, args=list(shape1 = a, shape2 = b), ) +
stat_function(fun = dbeta, args=list(shape1 = a + s, shape2 = b + n - s)) +
geom_abline(v=s/n)
ggplot(xx, aes(x = x)) +
geom_abline(v=s/n) +
stat_function(fun = dbeta, args=list(shape1 = a, shape2 = b), ) +
stat_function(fun = dbeta, args=list(shape1 = a + s, shape2 = b + n - s)) +
theme_bw()
ggplot(xx, aes(x = x)) +
geom_vline(v=s/n) +
stat_function(fun = dbeta, args=list(shape1 = a, shape2 = b), ) +
stat_function(fun = dbeta, args=list(shape1 = a + s, shape2 = b + n - s)) +
theme_bw()
ggplot(xx, aes(x = x)) +
geom_vline(s/n) +
stat_function(fun = dbeta, args=list(shape1 = a, shape2 = b), ) +
stat_function(fun = dbeta, args=list(shape1 = a + s, shape2 = b + n - s)) +
theme_bw()
ggplot(xx, aes(x = x)) +
geom_vline(xintercept = s/n) +
stat_function(fun = dbeta, args=list(shape1 = a, shape2 = b), ) +
stat_function(fun = dbeta, args=list(shape1 = a + s, shape2 = b + n - s)) +
theme_bw()
ggplot(xx, aes(x = x)) +
geom_vline(xintercept = s/nm, linetype="dashed", color = "red") +
stat_function(fun = dbeta, args=list(shape1 = a, shape2 = b), ) +
stat_function(fun = dbeta, args=list(shape1 = a + s, shape2 = b + n - s)) +
theme_bw()
ggplot(xx, aes(x = x)) +
geom_vline(xintercept = s/n, linetype="dashed", color = "red") +
stat_function(fun = dbeta, args=list(shape1 = a, shape2 = b), ) +
stat_function(fun = dbeta, args=list(shape1 = a + s, shape2 = b + n - s)) +
theme_bw()
a <- 1.4
b <- 1.4
n <- 100
s <- 30
xx <- data.frame(x = c(0, 1))
ggplot(xx, aes(x = x)) +
geom_vline(xintercept = s/n, linetype="dashed", color = "red") +
stat_function(fun = dbeta, args=list(shape1 = a, shape2 = b), ) +
stat_function(fun = dbeta, args=list(shape1 = a + s, shape2 = b + n - s)) +
theme_bw()
a <- 2
b <- 2
n <- 100
s <- 30
xx <- data.frame(x = c(0, 1))
ggplot(xx, aes(x = x)) +
geom_vline(xintercept = s/n, linetype="dashed", color = "red") +
stat_function(fun = dbeta, args=list(shape1 = a, shape2 = b), ) +
stat_function(fun = dbeta, args=list(shape1 = a + s, shape2 = b + n - s)) +
theme_bw()
ggplot(xx, aes(x = x)) +
geom_vline(xintercept = s/n, linetype="dashed", color = "red") +
stat_function(fun = dbeta, args=list(shape1 = a, shape2 = b), fill = 'red') +
stat_function(fun = dbeta, args=list(shape1 = a + s, shape2 = b + n - s), fill = 'blue') +
theme_bw()
ggplot(xx, aes(x = x)) +
geom_vline(xintercept = s/n, linetype="dashed", color = "red") +
stat_function(fun = dbeta, args=list(shape1 = a, shape2 = b), aes(fill = 'red')) +
stat_function(fun = dbeta, args=list(shape1 = a + s, shape2 = b + n - s), aes(fill = 'blue')) +
theme_bw()
ggplot(xx, aes(x = x)) +
geom_vline(xintercept = s/n, linetype="dashed", color = "red") +
stat_function(fun = dbeta, args=list(shape1 = a, shape2 = b)) +
stat_function(fun = dbeta, args=list(shape1 = a + s, shape2 = b + n - s)) +
theme_bw()
hist(rgamma(1e6, rate = 2, scale = 12))
hist(rgamma(1e6, rate = 2, rate = 12))
hist(rgamma(1e6, shape = 2, rate = 12))
hist(rgamma(1e6, shape = 2, scale = 12))
hist(rgamma(1e6, shape = 2, scale = 1/12))
hist(rgamma(1e6, shape = 2, scale = 1/6))
hist(rgamma(1e6, shape = 1, scale = 1))
hist(rgamma(1e6, shape = 1, scale = 0.5))
hist(rgamma(1e6, shape = 0.5, scale = 0.5))
hist(rgamma(1e6, shape = 0.5, rate = 0.5))
hist(rgamma(1e6, shape = 1, rate = 0.5))
hist(rgamma(1e6, shape = 1, rate = 6))
hist(rgamma(1e6, shape = 1, rate = 1))
hist(rgamma(1e6, shape = 6, rate = 6))
hist(rgamma(1e6, shape = 6, rate = 3))
hist(rgamma(1e6, shape = 6, rate = 1))
hist(rgamma(1e6, shape = 6, rate = 6))
hist(rgamma(1e6, shape = 3, rate = 6))
hist(rgamma(1e6, shape = 6, rate = 6))
hist(rgamma(1e6, shape = 6, rate = 1))
ggplot(xx, aes(x = x)) +
geom_vline(xintercept = s/n, linetype="dashed", color = "red") +
stat_function(fun = dbeta, args=list(shape1 = a, shape2 = b)) +
stat_function(fun = dbeta, args=list(shape1 = a + s, shape2 = b + n - s)) +
theme_bw()
summary(dbeta)
install.packages(brms)
install.packages('brms')
library(brms)
data("kidney")
fit1 <- brm(time | cens(censored) ~ age * sex + disease + (1 + age | patient),
data = kidney, family = lognormal(),
prior = c(set_prior("normal(0,5)", class = "b"),
set_prior("cauchy(0,2)", class = "sd"),
set_prior("lkj(2)", class = "cor")),
warmup = 1000, iter = 2000, chains = 4,
control = list(adapt_delta = 0.95)))
fit1 <- brm(time | cens(censored) ~ age * sex + disease + (1 + age | patient),
data = kidney, family = lognormal(),
prior = c(set_prior("normal(0,5)", class = "b"),
set_prior("cauchy(0,2)", class = "sd"),
set_prior("lkj(2)", class = "cor")),
warmup = 1000, iter = 2000, chains = 4,
control = list(adapt_delta = 0.95))
fit1 <- brm(time | cens(censored) ~ age * sex + disease + (1 + age | patient),
data = kidney, family = lognormal(),
prior = c(set_prior("normal(0,5)", class = "b"),
set_prior("cauchy(0,2)", class = "sd"),
set_prior("lkj(2)", class = "cor")),
warmup = 1000, iter = 2000, chains = 4,
control = list(adapt_delta = 0.95))
summary(fit1)
fit2 <- update(fit1, formula. = ~ . - (1 + age | patient) + (1 | patient))
summary(fit2)
hypothesis(fit2, 'Intercept - age > 0', class = 'sd')
hypothesis(fit2, 'Intercept - age > 0', class = 'b', )
hypothesis(fit2, 'age > 0', class = 'b', )
install.packages("tidymodels")
set.seed(3)
x <- seq(0,2*pi,0.1)
z <- sin(x)
y <- z + rnorm(mean=0, sd=0.5*sd(z), n=length(x))
d <- cbind.data.frame(x,y,z)
### GAM example using mgcv
library(mgcv)
library(ggplot2)
# fake data
n <- 50
sig <- 2
dat <- gamSim(1,n=n,scale=sig)
# P-spline smoothers (with lambda=0.6) used for x1 and x2; x3 is parametric.
b1 <- mgcv::gam(y ~ s(x1, bs='ps', sp=0.6) + s(x2, bs='ps', sp=0.6) + x3, data = dat)
summary(b1)
plot(b1)
# plot the smooth predictor function for x1 with ggplot to get a nicer looking graph
p <- predict(b1, type="lpmatrix")
beta <- coef(b1)[grepl("x1", names(coef(b1)))]
s <- p[,grepl("x1", colnames(p))] %*% beta
ggplot(data=cbind.data.frame(s, dat$x1), aes(x=dat$x1, y=s)) + geom_line()
setwd("~/Documentos Fernando/GitHub/nefin-data/nefindata/R")
devtools::document()
