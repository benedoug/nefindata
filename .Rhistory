summarise(!!value.col := mean())
df %>%
group_by(year, month) %>%
summarise(!!value.col := mean(.))
df %>%
group_by(year, month) %>%
summarise(!!value.col := mean(SMB))
enquo(sum)
enquo(sum(SMB))
enquo(sum(quote(SMB)))
summarise(!!value.col := eval_tidy(mean(SMB))
summarise(eval_tidy(mean(SMB))
df %>%
group_by(year, month) %>%
summarise(mean(SMB))
df
df %>%
group_by(year, month) %>%
summarise(last(SMB))
summarise(last
df %>%
group_by(year, month) %>%
summarise(last)
df %>%
group_by(year, month) %>%
summarise(last)
df %>%
group_by(year, month) %>%
summarise(last)
df %>%
group_by(year, month) %>%
summarise(last())
df %>%
group_by(year, month) %>%
summarise_all(last())
df %>%
group_by(year, month) %>%
summarise_all(last(.))
source('~/Documentos Fernando/GitHub/nefin-data/get_risk_factor.R', echo=TRUE)
df %>%
group_by(year, month) %>%
summarise_all(funs(quo('sum')))
df %>%
group_by(year, month) %>%
summarise_all(funs(quo(sum)))
df %>%
group_by(year, month) %>%
summarise_all(funs(sum))
df %>%
group_by(year, month) %>%
summarise_all(funs(last))
df %>%
group_by(year, month) %>%
summarise_all(funs(!! 'last'))
df %>%
group_by(year, month) %>%
summarise_all(funs(!! agg.func))
agg.func <- 'mean'
df %>%
group_by(year, month) %>%
summarise_all(funs(!! agg.func))
# download single risk factor
get_single_risk_factor <- function(factor,
agg = 'daily',
agg.func = 'last',
progress = TRUE) {
# check if valid factor was chosen
if (missing(factor)) {
stop('ERROR: Please choose a valid risk factor. See documentation for valid options.')
}
# risk factor URL and tmp file
root.url <-  'http://nefin.com.br/Risk%20Factors/'
if (factor == 'Rf') {
# Risk free file patterns is different
url.file <- 'Risk_Free.xls'
} else {
url.file <- paste0(factor, '_Factor.xls')
}
# create tmp if not exists (if so it does not crash)
tmp.folder <- 'tmp-nefin'
dir.create(file.path(getwd(), tmp.folder), showWarnings = FALSE)
tmp.file <- file.path(getwd(), tmp.folder, url.file)
# remove possible downloaded tmp file
try({
file.remove(tmp.file)
})
# download
try({
utils::download.file(
url = paste0(root.url, url.file),
method = 'auto',
mode = "wb",
quiet = !progress,
destfile = tmp.file)
})
# read excel
df <- readxl::read_excel(tmp.file)
value.col <- names(df)[length(names(df))]
# check if aggregation was required
if (agg == 'daily' | agg == 'day') {
return(df)
} else if (agg == 'monthly' | agg == 'month') {
if (missing(agg.func)) {
stop('ERROR: must provide function to aggregate')
} else {
df %>%
select(-day) %>%
group_by(year, month) %>%
summarise_all(summarise_all(funs(!! agg.func)))
}
}
}
df <- get_single_risk_factor(factor = 'SMB', agg = 'day', agg.func = 'last')
df
df <- get_single_risk_factor(factor = 'SMB', agg = 'month', agg.func = 'last')
df <- get_single_risk_factor(factor = 'SMB', agg = 'month', agg.func = 'last')
df %>%
select(-day) %>%
group_by(year, month) %>%
summarise_all(funs(!! agg.func))
# download single risk factor
get_single_risk_factor <- function(factor,
agg = 'daily',
agg.func = 'last',
progress = TRUE) {
# check if valid factor was chosen
if (missing(factor)) {
stop('ERROR: Please choose a valid risk factor. See documentation for valid options.')
}
# risk factor URL and tmp file
root.url <-  'http://nefin.com.br/Risk%20Factors/'
if (factor == 'Rf') {
# Risk free file patterns is different
url.file <- 'Risk_Free.xls'
} else {
url.file <- paste0(factor, '_Factor.xls')
}
# create tmp if not exists (if so it does not crash)
tmp.folder <- 'tmp-nefin'
dir.create(file.path(getwd(), tmp.folder), showWarnings = FALSE)
tmp.file <- file.path(getwd(), tmp.folder, url.file)
# remove possible downloaded tmp file
try({
file.remove(tmp.file)
})
# download
try({
utils::download.file(
url = paste0(root.url, url.file),
method = 'auto',
mode = "wb",
quiet = !progress,
destfile = tmp.file)
})
# read excel
df <- readxl::read_excel(tmp.file)
value.col <- names(df)[length(names(df))]
# check if aggregation was required
if (agg == 'daily' | agg == 'day') {
return(df)
} else if (agg == 'monthly' | agg == 'month') {
if (missing(agg.func)) {
stop('ERROR: must provide function to aggregate')
} else {
df %>%
select(-day) %>%
group_by(year, month) %>%
summarise_all(funs(!! agg.func))
}
}
}
get_single_risk_factor(factor = 'SMB', agg = 'month', agg.func = 'last')
df.holder %>%
purrr::reduce(full_join)
# download more than one risk factor and concatenate into single tibble
get_risk_factors <- function(factors,
agg = 'daily',
agg.func = 'last',
progress = TRUE) {
# check if valid factor was chosen
if (missing(factor)) {
stop('ERROR: Please choose a valid risk factor. See documentation for valid options.')
}
# all factors
all.factors <- c('Market', 'SMB', 'HML', 'WML', 'IML', 'Rf')
# check if factors is string and is 'all'
if (isSingleString(factors)) {
if (tolower(factors) == 'all') {
facotrs <- all.factors
}
}
# loop and download each factor
df.holder <- data.frame(cols = factors)
for (factor in factors) {
# download risk df
tmp <- get_single_risk_factor(factor = factor,
agg = agg,
agg.func = agg.func,
progress = progress)
# store as tibble inside df.holder
df.holder <-
df.holder %>%
mutate(map(factor, ~tmp[.x]))
}
df.holder %>%
purrr::reduce(full_join)
}
get_risk_factors('all')
# download more than one risk factor and concatenate into single tibble
get_risk_factors <- function(factors,
agg = 'daily',
agg.func = 'last',
progress = TRUE) {
# check if valid factor was chosen
if (missing(factors)) {
stop('ERROR: Please choose a valid risk factor. See documentation for valid options.')
}
# all factors
all.factors <- c('Market', 'SMB', 'HML', 'WML', 'IML', 'Rf')
# check if factors is string and is 'all'
if (isSingleString(factors)) {
if (tolower(factors) == 'all') {
facotrs <- all.factors
}
}
# loop and download each factor
df.holder <- data.frame(cols = factors)
for (factor in factors) {
# download risk df
tmp <- get_single_risk_factor(factor = factor,
agg = agg,
agg.func = agg.func,
progress = progress)
# store as tibble inside df.holder
df.holder <-
df.holder %>%
mutate(map(factor, ~tmp[.x]))
}
df.holder %>%
purrr::reduce(full_join)
}
get_risk_factors('all')
# download more than one risk factor and concatenate into single tibble
get_risk_factors <- function(factors,
agg = 'daily',
agg.func = 'last',
progress = TRUE) {
# check if valid factor was chosen
if (missing(factors)) {
stop('ERROR: Please choose a valid risk factor. See documentation for valid options.')
}
# all factors
all.factors <- c('Market', 'SMB', 'HML', 'WML', 'IML', 'Rf')
# check if factors is string and is 'all'
if (isSingleString(factors)) {
if (tolower(factors) == 'all') {
factors <- all.factors
}
}
# loop and download each factor
df.holder <- data.frame(cols = factors)
for (factor in factors) {
# download risk df
tmp <- get_single_risk_factor(factor = factor,
agg = agg,
agg.func = agg.func,
progress = progress)
# store as tibble inside df.holder
df.holder <-
df.holder %>%
mutate(map(factor, ~tmp[.x]))
}
df.holder %>%
purrr::reduce(full_join)
}
get_risk_factors('all')
# download more than one risk factor and concatenate into single tibble
get_risk_factors <- function(factors,
agg = 'daily',
agg.func = 'last',
progress = TRUE) {
# check if valid factor was chosen
if (missing(factors)) {
stop('ERROR: Please choose a valid risk factor. See documentation for valid options.')
}
# all factors
all.factors <- c('Market', 'SMB', 'HML', 'WML', 'IML', 'Rf')
# check if factors is string and is 'all'
if (isSingleString(factors)) {
if (tolower(factors) == 'all') {
factors <- all.factors
}
}
# loop and download each factor
df.holder <- data.frame(cols = factors)
for (factor in factors) {
# download risk df
tmp <- get_single_risk_factor(factor = factor,
agg = agg,
agg.func = agg.func,
progress = progress)
# store as tibble inside df.holder
df.holder <-
df.holder %>%
mutate(purrr:map(factor, ~tmp[.x]))
}
df.holder %>%
purrr::reduce(full_join)
}
get_risk_factors('all')
# download more than one risk factor and concatenate into single tibble
get_risk_factors <- function(factors,
agg = 'daily',
agg.func = 'last',
progress = TRUE) {
# check if valid factor was chosen
if (missing(factors)) {
stop('ERROR: Please choose a valid risk factor. See documentation for valid options.')
}
# all factors
all.factors <- c('Market', 'SMB', 'HML', 'WML', 'IML', 'Rf')
# check if factors is string and is 'all'
if (isSingleString(factors)) {
if (tolower(factors) == 'all') {
factors <- all.factors
}
}
# loop and download each factor
df.holder <- data.frame(cols = factors)
for (factor in factors) {
# download risk df
tmp <- get_single_risk_factor(factor = factor,
agg = agg,
agg.func = agg.func,
progress = progress)
# store as tibble inside df.holder
df.holder <-
df.holder %>%
mutate(purrr::map(factor, ~tmp[.x]))
}
df.holder %>%
purrr::reduce(full_join)
}
get_risk_factors('all')
get_risk_factors(c('SMB', 'HML', 'WML', 'IML', 'Rf'))
get_single_risk_factor(factor = 'Market', agg = 'month', agg.func = 'last')
get_single_risk_factor(factor = 'Rf', agg = 'month', agg.func = 'last')
# download more than one risk factor and concatenate into single tibble
get_risk_factors <- function(factors,
agg = 'daily',
agg.func = 'last',
progress = TRUE) {
# check if valid factor was chosen
if (missing(factors)) {
stop('ERROR: Please choose a valid risk factor. See documentation for valid options.')
}
# all factors
all.factors <- c('Market', 'SMB', 'HML', 'WML', 'IML', 'Rf')
cols.names <- c('Rm_minus_Rf', 'SMB', 'HML', 'WML', 'IML', 'Risk_free')
# check if factors is string and is 'all'
if (isSingleString(factors)) {
if (tolower(factors) == 'all') {
factors <- all.factors
}
}
# loop and download each factor
df.holder <- data.frame(cols = cols.names)
for (i in 1:length(factors)) {
# download risk df
tmp <- get_single_risk_factor(factor = factors[i],
agg = agg,
agg.func = agg.func,
progress = progress)
# store as tibble inside df.holder
df.holder <-
df.holder %>%
mutate(purrr::map(cols.names[i], ~tmp[.x]))
}
df.holder %>%
purrr::reduce(full_join)
}
get_risk_factors(c('SMB', 'HML', 'WML', 'IML', 'Rf'))
all.factors <- c('Market', 'SMB', 'HML', 'WML', 'IML', 'Rf')
cols.names <- c('Rm_minus_Rf', 'SMB', 'HML', 'WML', 'IML', 'Risk_free')
factors <- all.factors
df.holder <- data.frame(cols = cols.names)
tmp <- get_single_risk_factor(factor = factors[i],
agg = agg,
agg.func = agg.func,
progress = progress)
tmp <- get_single_risk_factor(factor = factors[1],
agg = agg,
agg.func = agg.func,
progress = progress)
progress = TRUE
agg = 'daily'
agg.func = 'last'
agg = 'month'
tmp <- get_single_risk_factor(factor = factors[1],
agg = agg,
agg.func = agg.func,
progress = progress)
View(tmp)
View(df.holder)
df.holder %>%
mutate(purrr::map(cols.names[i], ~tmp[.x]))
df.holder %>%
mutate(purrr::map(cols.names[1], ~tmp[.x]))
df.holder <-
df.holder %>%
mutate(purrr::map(cols.names[1], ~tmp[.x]))
View(df.holder)
df.holder <- data.frame(cols = cols.names)
df.holder <-
df.holder %>%
purrr::map(cols.names[1], ~tmp[.x])
df.holder <- data.frame()
df.holder %>%
full_join(tmp)
df.holder <- data.frame() %>% mutate(year, month)
df.holder <-
df.holder %>%
full_join(tmp)
df.holder
# loop and download each factor
df.holder <- data.frame(cols = c('year', 'month'))
df.holder %>%
full_join(tmp)
df.holder <- data.frame(cols = c('year', 'month'))
View(df.holder)
# loop and download each factor
df.holder <- data.frame(year = NULL, month = NULL))
# loop and download each factor
df.holder <- data.frame(year = NULL, month = NULL)
View(df.holder)
data.frame(ncol = 2)
data.frame(ncols = 2)
# loop and download each factor
df.holder <- tibble(year = numeric(), month = numeric())
tmp <- get_single_risk_factor(factor = factors[1],
agg = agg,
agg.func = agg.func,
progress = progress)
# store as tibble inside df.holder
df.holder <-
df.holder %>%
full_join(tmp)
df.holder
tmp <- get_single_risk_factor(factor = factors[2],
agg = agg,
agg.func = agg.func,
progress = progress)
# store as tibble inside df.holder
df.holder <-
df.holder %>%
full_join(tmp)
df.holder
# download more than one risk factor and concatenate into single tibble
get_risk_factors <- function(factors,
agg = 'month',
agg.func = 'last',
progress = TRUE) {
# check if valid factor was chosen
if (missing(factors)) {
stop('ERROR: Please choose a valid risk factor. See documentation for valid options.')
}
# all factors
all.factors <- c('Market', 'SMB', 'HML', 'WML', 'IML', 'Rf')
# check if factors is string and is 'all'
if (isSingleString(factors)) {
if (tolower(factors) == 'all') {
factors <- all.factors
}
}
# init empty df with columns
if (agg == 'daily' | agg == 'day') {
df <- tibble(year = numeric(), month = numeric(), day = numeric())
} else {
df <- tibble(year = numeric(), month = numeric())
}
# loop over factors
for (factor in factors) {
# download risk df
tmp <- get_single_risk_factor(factor = factor,
agg = agg,
agg.func = agg.func,
progress = progress)
# full join
df <-
df %>%
full_join(tmp)
}
# return
df
}
get_risk_factors(c('SMB', 'HML', 'WML', 'IML', 'Rf'))
get_risk_factors('all')
setwd("~/Documentos Fernando/GitHub/nefin-data/nefin-data")
document()
install.packages("devtools")
install.packages("devtools")
devtools::document()
setwd('..')
devtools::document()
create(nefin-data)
devtools::create(nefin-data)
devtools::create('nefin-data')
devtools::create('nefindata')
devtools::document()
getwd()
setwd('./nefindata')
devtools::document()
